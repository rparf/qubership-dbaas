---

# This GitHub Actions workflow is designed to be triggered when a release is marked as a full release.
# The workflow performs the following tasks:
# 1. Checks if the tag already exists.
# 2. Updates the version in the pom.xml file.
# 3. Commits the changes to the repository.
# 4. Builds the project using Maven.
# 5. Runs tests.
# 6. Tags the commit with the release version.
# 7. Publishes the artifact to the Maven repository.
# 8. Builds and publishes a Docker image.
# 9. Creates a GitHub release.

# To make it work for your project, you need to adjust the pom.xml and add configuration file for GitHub release.
# Please find detailed instructions:
# https://github.com/Netcracker/qubership-workflow-hub?tab=readme-ov-file#maven-project-release-workflow

name: Dbaas Release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        default: ''
        type: string
        description: 'Release version (e.g., 1.0.0)'
      java_version:
        required: false
        type: string
        default: "21"
        description: 'Java version (e.g., 21)'
      build-docker:
        required: false
        type: boolean
        default: true
        description: 'Release docker image if there is Docker file'
      dry-run:
        required: false
        type: boolean
        default: false
        description: 'Dry run'
      profile:
        description: 'Maven profile to use'
        type: choice
        options:
          - 'github'
          - 'central'
        required: true
        default: 'central'
permissions:
  contents: write
  packages: write

jobs:
  dry-run-build:
    runs-on: ubuntu-latest
    steps:
      - name: "Build and Publish"
        uses: netcracker/qubership-workflow-hub/actions/maven-release@main
        with:
          version-type: ${{ github.event.inputs.version-type }}
          module: ${{ github.event.repository.name }}
          maven-args: ${{ inputs.mvn-args }}
          profile: ${{ inputs.profile }}
          token: ${{ secrets.GITHUB_TOKEN }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          dry-run: 'true'
  publish:
    needs: dry-run-build
    if: ${{ needs.dry-run-build.result == 'success' }}
    outputs:
      release-version: ${{ steps.build-and-publish.outputs.release-version }}
    runs-on: ubuntu-latest
    steps:
      - name: "Build and Publish"
        id: build-and-publish
        uses: netcracker/qubership-workflow-hub/actions/maven-release@main
        with:
          version-type: ${{ github.event.inputs.version-type }}
          module: ${{ github.event.repository.name }}
          maven-args: ${{ inputs.mvn-args }}
          token: ${{ secrets.GITHUB_TOKEN }}
          server-id: ${{ inputs.profile }}
          profile: ${{ inputs.profile }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          dry-run: 'false'
  check-tag:
    needs : [publish]
    if: ${{ needs.publish.result == 'success' }}
    outputs:
      tag-exists: ${{ steps.check_tag.outputs.tag-exists }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if tag exists
        id: check_tag
        uses: netcracker/qubership-workflow-hub/actions/tag-action@main
        with:
          ref: ${{ github.ref }}
          check-tag: 'true'
          create-tag: 'false'
          tag-name: ${{ steps.build-and-publish.outputs.release-version }}
  load-docker-build-components:
      needs: [publish]
      runs-on: ubuntu-latest
      outputs:
        component: ${{ steps.load_component.outputs.components }}
        platforms: ${{ steps.load_component.outputs.platforms }}
      steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Docker Configuration
        id: load_component
        run:  |
          verify=$(cat "$GITHUB_WORKSPACE/.github/docker-build-config.json" | jq '
          def verify_structure:
          .components as $components
          | .platforms as $platforms
          | ($components | type == "array")
          and (all($components[]; has("name") and has("file") and has("context")))
          and ($platforms | type == "string");
          verify_structure
          | if . then true else false end
          ')
          if [ ${verify} == 'true' ]; then
            echo "✅ $GITHUB_WORKSPACE/.github/docker-build-config.json file is valid"
            components=$(jq -c ".components" "$GITHUB_WORKSPACE/.github/docker-build-config.json")
            platforms=$(jq -c ".platforms" "$GITHUB_WORKSPACE/.github/docker-build-config.json")
          else
            echo "❗ $GITHUB_WORKSPACE/.github/docker-build-config.json file is invalid"
            echo "❗ $GITHUB_WORKSPACE/.github/docker-build-config.json file is invalid" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "components=${components}" >> $GITHUB_OUTPUT
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT
  prepare-chart:
      needs: [check-tag]
      permissions:
        contents: write
      runs-on: ubuntu-latest
      steps:
      - name: Change Chart Version Action
        uses: netcracker/qubership-workflow-hub/actions/chart-version@main
        with:
          new-chart-version: ${{ github.event.inputs.version }}
          chart-yaml-path: ${{ github.event.inputs.path-to-chart }}

      - name: Run Commit and Push Action
        uses: Netcracker/qubership-workflow-hub/actions/commit-and-push@main
        with:
          commit_message: "Update chart version to v${{ github.event.inputs.version }}"

      - name: "Create release tag"
        uses: netcracker/qubership-workflow-hub/actions/tag-action@main
        with:
          ref: ${{ github.ref }}
          check-tag: 'false'
          create-tag: 'true'
          force-create: ${{ github.event.inputs.force-create-tag }}
          tag-name: v${{ github.event.inputs.version }}

  docker-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.load-docker-build-components.outputs.component) }}

    needs: [check-tag, load-docker-build-components]
    steps:
      - name: "Docker Build"
        id: docker_build
        uses: netcracker/qubership-workflow-hub/actions/docker-action@main
        with:
          ref: v${{ inputs.version }}
          download-artifact: false
          dry-run: ${{ inputs.dry-run }}
          component: ${{ toJson(matrix.component) }}
          platforms: ${{ needs.load-docker-build-components.outputs.platforms }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  github-release:
    needs: [check-tag, docker-build]
    uses: netcracker/qubership-workflow-hub/.github/workflows/release-drafter.yml@main
    with:
      version: ${{ github.event.inputs.version }}
      publish: false

  upload-assets:
    needs: [github-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Archive and Upload Assets
      uses: netcracker/qubership-workflow-hub/actions/archive-and-upload-assets@main
      with:
        config-path: './.github/assets-config.yml'
        dist-path: './dist'
        upload: true
        ref: v${{ github.event.inputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
